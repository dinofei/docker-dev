version: "3.6"

services: 
    # 数据库
    mysql57:
        image: mysql:5.7.31
        container_name: mysql57
        networks: 
            wfw:
                ipv4_address: 172.22.22.180
        ports: 
            - "3306:3306"
        volumes:
            - "/etc/localtime:/etc/localtime"
            - "./数据库/mysql57/mysql.cnf:/etc/mysql/conf.d/mysql.cnf"
            - "./数据库/mysql57/data:/var/lib/mysql"
        environment: 
            MYSQL_ROOT_PASSWORD: "root"
            MYSQL_DATABASE: "test"
            MYSQL_USER: "test"
            MYSQL_PASSWORD: "test" 
        privileged: true   
        restart: unless-stopped

    # kong网关    
    postgres:
        image: postgres:9.6
        container_name: postgres
        networks: 
            wfw:
                ipv4_address: 172.22.22.170
        ports: 
            - "5432:5432"        
        environment: 
            POSTGRES_PASSWORD: "postgres"
        volumes: 
            - "/etc/localtime:/etc/localtime"
            - "./kong网关/postgres/data:/var/lib/postgresql/data"
            - "./kong网关/postgres/postgresql.conf:/etc/postgresql/postgresql.conf" 
            - "./kong网关/postgres/init_user_db.sh:/docker-entrypoint-initdb.d/init_user_db.sh"       
        restart: unless-stopped   
    # docker run --rm \
    # --network=docker_wfw \
    # -e "KONG_DATABASE=postgres" \
    # -e "KONG_PG_HOST=postgres" \
    # -e "KONG_PG_PASSWORD=123123" \
    # -e "KONG_CASSANDRA_CONTACT_POINTS=postgres" \
    # kong:2.1.4 kong migrations bootstrap    
    kong:
        image: kong:2.1.4
        container_name: kong
        networks: 
            wfw:
                ipv4_address: 172.22.22.171
        ports: 
            - "8000:8000"          
            - "8001:8001"          
            - "8443:8443"          
            - "8444:8444"  
        volumes: 
            - "/etc/localtime:/etc/localtime"
        depends_on: 
            - postgres                
        environment: 
            KONG_DATABASE: "postgres"
            KONG_PG_HOST: "172.22.22.170"
            KONG_PG_PASSWORD: 123123
            KONG_CASSANDRA_CONTACT_POINTS: "postgres"
            KONG_ADMIN_LISTEN: "0.0.0.0:8001, 0.0.0.0:8444 ssl"
        privileged: true
        restart: unless-stopped
    # docker run --rm \
    # --network docker_wfw \
    # pantsel/konga \
    # -c prepare \
    # -a postgres \
    # -u postgresql://konga:123123@postgres:5432/konga    
    konga:
        image: pantsel/konga
        container_name: konga
        volumes: 
            - "/etc/localtime:/etc/localtime"
            - "./kong网关/konga/lib/assets:/app/assets"
        ports: 
            - "1337:1337"
        depends_on: 
            - kong              
        environment: 
            TOKEN_SECRET: "yyb-konga"
            DB_ADAPTER: "postgres"   
            DB_HOST: "172.22.22.170"
            DB_PORT: 5432
            DB_USER: "konga" 
            DB_PASSWORD: "123123"
            DB_DATABASE: "konga" 
            NODE_ENV: "production"   
        privileged: true
        restart: unless-stopped

    # 系统监控
    # 给host:8001/metrics添加一个服务 并创建一个路由host:8000/metrics 修改配置文件
    prometheus:
        image: prom/prometheus:v2.22.0
        container_name: prometheus
        networks: 
            wfw:
                ipv4_address: 172.22.22.173
        ports: 
            - "9090:9090"        
        volumes: 
            - "/etc/localtime:/etc/localtime"
            - "./系统监控/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml"
        restart: unless-stopped    
    # admin/admin123                  
    grafana:
        image: grafana/grafana:7.3.0
        container_name: grafana
        ports: 
            - "3000:3000"
        volumes: 
            - "/etc/localtime:/etc/localtime"
        restart: unless-stopped

    # rabbitmq
    rabbitmq-node1:
        image: rabbitmq:3.8-management-alpine
        container_name: rabbitmq-node1
        networks: 
            wfw:
                ipv4_address: 172.22.22.175
        ports: 
            - "5672:5672"
            - "15672:15672"
        volumes:
            - "/etc/localtime:/etc/localtime"
            - "./消息队列/rabbitmq/rabbitmq.conf:/etc/rabbitmq/rabbitmq.conf"
            - "./消息队列/rabbitmq/data:/var/lib/rabbitmq" 
        hostname: node1  
        privileged: true
        restart: unless-stopped

    # kafka
    zookeeper:
        image: zookeeper
        container_name: zookeeper
        networks: 
            wfw:
                ipv4_address: 172.22.22.176
        ports:
            - 2182:2181
            - 2888:2888
            - 3888:3888
        environment:
            ZOO_MY_ID: 1
            ZOO_SERVERS: server.1=0.0.0.0:2888:3888;2181 
        volumes:
            - ./消息队列/zookeeper/data:/data
            - ./消息队列/zookeeper/datalog:/datalog
        restart: unless-stopped
    kafka:
        image: wurstmeister/kafka:2.13-2.7.0
        container_name: kafka
        networks: 
            wfw:
                ipv4_address: 172.22.22.177
        ports:
            - "9092:9092"
            - "1099:1099"
        environment:
            KAFKA_BROKER_ID: 1
            KAFKA_ADVERTISED_HOST_NAME: 192.168.229.100 ## 修改:宿主机IP
            KAFKA_ADVERTISED_PORT: 9092 ## 修改:宿主机映射port
            KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://192.168.229.100:9092 ## 绑定发布订阅的端口。
            KAFKA_ZOOKEEPER_CONNECT: "192.168.229.100:2182"
            KAFKA_JMX_OPTS: "-Dcom.sun.management.jmxremote -Dcom.sun.management.jmxremote.authenticate=false -Dcom.sun.management.jmxremote.ssl=false -Djava.rmi.server.hostname=192.168.229.100 -Dcom.sun.management.jmxremote.rmi.port=1099"
            JMX_PORT: 1099 # 开启监控端口
        volumes:
            - "./消息队列/kafka/data/:/kafka"
        depends_on: 
            - "zookeeper"       
        restart: unless-stopped
    kafka-manager:
        image: kafkamanager/kafka-manager
        container_name: kafka-manager
        hostname: kafka-manager
        ports:
            - "9002:9000"
        depends_on: 
            - "kafka"    
        environment:
            ZK_HOSTS: 192.168.229.100:2182
            TZ: CST-8
        restart: unless-stopped

    # consul-server
    consul:
        image: consul:1.9
        container_name: consul
        networks: 
            wfw:
                ipv4_address: 172.22.22.178
        ports:
            - "8500:8500"
        volumes: 
            - "./注册中心/consul/data:/tmp/consul"    
        restart: unless-stopped
        command: consul agent -server -bootstrap-expect 1 -data-dir /tmp/consul -node=consul -bind=172.22.22.178 -client=0.0.0.0 -ui                                   
    # consul-client
    consul-client:
        image: consul:1.9
        container_name: consul-client
        networks: 
            wfw:
                ipv4_address: 172.22.22.179
        ports:
            - "8501:8500"
        restart: unless-stopped
        command: consul agent -bind=172.22.22.179 -ui -client=0.0.0.0 -data-dir /tmp/consul -node=consul-client -retry-join=172.22.22.178                                
    
    # elk
    # chmod 0777 -R elasticsearch_01/data
    # grep vm.max_map_count /etc/sysctl.conf
    # vm.max_map_count=262144
    # sysctl -w vm.max_map_count=262144
    es_01:
        image: elasticsearch:7.6.2
        container_name: es_01
        networks: 
            wfw:
                ipv4_address: 172.22.22.160
        ports: 
            - "9200:9200"
        environment:
            - "ES_JAVA_OPTS=-Xms215m -Xmx215m"     
        volumes: 
            - "/etc/localtime:/etc/localtime"
            - "./elk/elasticsearch_01/data:/usr/share/elasticsearch/data"
            - "./elk/elasticsearch_01/elasticsearch.yml:/usr/share/elasticsearch/config/elasticsearch.yml" 
        privileged: true
        restart: unless-stopped             
    kibana:
        image: kibana:7.6.2
        container_name: kibana
        networks: 
            wfw:
                ipv4_address: 172.22.22.158
        ports: 
            - "5601:5601"
        volumes: 
            - "/etc/localtime:/etc/localtime"
            - ./elk/kibana/kibana.yml:/usr/share/kibana/config/kibana.yml
        privileged: true
        restart: unless-stopped             
    logstash:
        image: logstash:7.6.2
        container_name: logstash
        networks: 
            wfw:
                ipv4_address: 172.22.22.161
        ports:
            - "5044:5044"
        volumes: 
            - "/etc/localtime:/etc/localtime"
            - ./elk/logstash/logstash.conf:/usr/share/logstash/pipeline/logstash.conf
            - ./elk/logstash/logstash.yml:/usr/share/logstash/logstash.yml
        privileged: true
        restart: unless-stopped

    # MongoDB
    mongodb:
        image: mongo:4.0.0
        container_name: mongodb
        networks: 
            wfw:
                ipv4_address: 172.22.22.162
        ports: 
            - "27017:27017"
        volumes:
            - "/etc/localtime:/etc/localtime"
            - "./mongodb/data:/data/db"
            - "./mongodb/mongod.conf:/etc/mongo/mongod.conf"
        environment:
            MONGO_INITDB_ROOT_USERNAME: guest
            MONGO_INITDB_ROOT_PASSWORD: guest    
        privileged: true
        restart: unless-stopped
    mongo-express:
        image: mongo-express
        container_name: mongo-express
        networks: 
            wfw:
                ipv4_address: 172.22.22.163
        ports:
            - 8081:8081
        environment:
            ME_CONFIG_MONGODB_SERVER: 172.22.22.85
            ME_CONFIG_BASICAUTH_USERNAME: guest
            ME_CONFIG_BASICAUTH_PASSWORD: guest
            ME_CONFIG_MONGODB_ADMINUSERNAME: guest
            ME_CONFIG_MONGODB_ADMINPASSWORD: guest    
        volumes: 
            - "/etc/localtime:/etc/localtime"                  
        restart: unless-stopped

    # nginx
    nginx:
        image: nginx:1.18
        container_name: nginx
        networks: 
            wfw:
                ipv4_address: 172.22.22.164
        ports: 
            - "80:80"
        volumes:
            - "/etc/localtime:/etc/localtime"
            - "./nginx/etc/nginx.conf:/etc/nginx/nginx.conf"
            - "/nginx/www/php:/www"
        privileged: true
        restart: unless-stopped

    # php
    php74:
        image: php74
        build: ./php/php74
        container_name: php74
        networks: 
            wfw:
                ipv4_address: 172.22.22.165
        ports: 
            - "9001:9000"
        volumes:
            - "/etc/localtime:/etc/localtime"
            - "./php/php74/php.ini:/usr/local/etc/php/php.ini"
            - "./php/php74/www.conf:/usr/local/etc/php-fpm.d/www.conf" 
            - "./php/php74/zz-docker.conf:/usr/local/etc/php-fpm.d/zz-docker.conf" 
            - "./php/php74/log:/var/log"
            - "/Users/ningfei/www/php:/www"
        privileged: true
        restart: unless-stopped       
    php56:
        image: php:5.6.40-fpm-alpine
        container_name: php56
        networks: 
            wfw:
                ipv4_address: 172.22.22.147
        ports: 
            - "9002:9000"
            - "8081:8000"
        volumes:
            - "/etc/localtime:/etc/localtime"
            - "/Users/ningfei/www/php:/var/www/html"
        privileged: true
        restart: unless-stopped   

    # 日志文件采集              
    filebeat:
        image: elastic/filebeat:7.6.2
        container_name: filebeat
        volumes: 
            - "/etc/localtime:/etc/localtime"
            - "./php/filebeat/filebeat.yml:/usr/share/filebeat/filebeat.yml"
            - "./php/php74/log:/home"
        privileged: true
        restart: unless-stopped 

    # redis
    redis:
        image: redis:5.0.10-alpine
        container_name: redis
        networks: 
            wfw:
                ipv4_address: 172.22.22.166
        ports: 
            - "6379:6379"
        volumes:
            - "/etc/localtime:/etc/localtime"
            - "./redis/data:/data"
            - "./redis/redis.conf:/etc/redis.conf"
        privileged: true
        restart: unless-stopped
        command: ["redis-server","/etc/redis.conf"] 

    # jaeger all-in-one
    jaeger:
        image: jaegertracing/all-in-one:latest
        container_name: jaeger-all-in
        ports:
            - "6831:6831/udp"
            - "16686:16686"
        networks:
            wfw:
                ipv4_address: 172.22.22.167 
        restart: unless-stopped         

    # jaeger 全家桶
    jaeger-collector:
        image: jaegertracing/jaeger-collector:1.22
        container_name: jaeger-collector
        environment: 
            SPAN_STORAGE_TYPE: elasticsearch
            ES_SERVER_URLS: http://172.22.22.160:9200
        networks: 
            wfw:
                ipv4_address: 172.22.22.168
        restart: unless-stopped
    jaeger-agent:
        image: jaegertracing/jaeger-agent:1.22
        container_name: jaeger-agent
        networks: 
            wfw:
                ipv4_address: 172.22.22.169
        ports: 
            - "6831:6831/udp"
        environment: 
            REPORTER_GRPC_HOST_PORT: 172.22.22.168:14250    
        restart: unless-stopped
    jaeger-query:
        image: jaegertracing/jaeger-query:1.22
        container_name: jaeger-query
        networks: 
            wfw:
                ipv4_address: 172.22.22.159
        ports: 
            - "16686:16686"        
        environment: 
            SPAN_STORAGE_TYPE: elasticsearch
            ES_SERVER_URLS: http://172.22.22.160:9200
        restart: unless-stopped 

    # zipkin
    zipkin:
        image: openzipkin/zipkin
        container_name: zipkin
        networks: 
            wfw:
                ipv4_address: 172.22.22.149
        ports: 
            - "9411:9411"        
        restart: unless-stopped       
    
    # etcd
    etcd:
        image: etcd
        build: ./etcd
        container_name: etcd
        networks: 
            wfw:
                ipv4_address: 172.22.22.148
        ports: 
            - "2379:2379"        
            - "2380:2380"        
        restart: unless-stopped
        
    # gitlab
    gitlab:
        image: 'ulm0/gitlab:13.2.6'
        container_name: gitlab
        # hostname: 'gitlab.example.com'
        networks: 
            wfw:
                ipv4_address: 172.22.22.147
        ports:
            - '800:80'
            - '4430:443'
            - '220:22'
        volumes:
            - '.git_jenkins/gitlab/config:/etc/gitlab'
            - '.git_jenkins/gitlab/logs:/var/log/gitlab'
            - '.git_jenkins/gitlab/data:/var/opt/gitlab'    
        restart: unless-stopped
                
networks: 
    wfw:
        name: "docker_wfw"
        driver: "bridge"
        ipam: 
            config: 
                - subnet: 172.22.22.0/24


